fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
state_popup <- paste0("<strong>Country: </strong>",
joined$sovereignt,
"<br><strong>GDP per cápita, 2012: </strong>",
round(joined$gdp_pc, 2))
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
pal <- colorQuantile("RdYlBu", joined$gdp_pc, n = 5)
state_popup <- paste0("<strong>Country: </strong>",
joined$sovereignt,
"<br><strong>GDP per cápita, 2012: </strong>",
round(joined$gdp_pc, 2))
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
shinyApp(
ui = fluidPage(
fluidRow(
leafletMap(
"map", "100%", 400,
initialTileLayer = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
initialTileLayerAttribution = HTML('Maps by <a href="http://www.mapbox.com/">Mapbox</a>'),
options=list(
center = c(37.45, -93.85),
zoom = 4,
maxBounds = list(list(17, -180), list(59, 180))))),
fluidRow(verbatimTextOutput("Click_text"))),
server = function(input, output, session){
map = createLeafletMap(session, 'map')
session$onFlushed(once=T, function(){
map$addCircleMarker(lat = latitude, lng = longitude, radius = radius,
layerId=ids)
})
observe({
click<-input$map_marker_click
if(is.null(click))
return()
text<-paste("Lattitude ", click$lat, "Longtitude ", click$lng)
text2<-paste("You've selected point ", click$id)
map$clearPopups()
map$showPopup( click$lat, click$lng, text)
output$Click_text<-renderText({
text2
})
})
}
)
library(shiny)
library(leaflet)
latitude<-c(35.94077, 35.83770, 35.84545, 35.81584, 35.79387, 36.05600)
longitude<-c(-78.58010, -78.78084, -78.72444, -78.62568, -78.64262, -78.67600)
radius<-c(15, 12, 12, 12, 12, 15)
ids<-c("a", "b", "c", "d", "e", "f")
shinyApp(
ui = fluidPage(
fluidRow(
leafletMap(
"map", "100%", 400,
initialTileLayer = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
initialTileLayerAttribution = HTML('Maps by <a href="http://www.mapbox.com/">Mapbox</a>'),
options=list(
center = c(37.45, -93.85),
zoom = 4,
maxBounds = list(list(17, -180), list(59, 180))))),
fluidRow(verbatimTextOutput("Click_text"))),
server = function(input, output, session){
map = createLeafletMap(session, 'map')
session$onFlushed(once=T, function(){
map$addCircleMarker(lat = latitude, lng = longitude, radius = radius,
layerId=ids)
})
observe({
click<-input$map_marker_click
if(is.null(click))
return()
text<-paste("Lattitude ", click$lat, "Longtitude ", click$lng)
text2<-paste("You've selected point ", click$id)
map$clearPopups()
map$showPopup( click$lat, click$lng, text)
output$Click_text<-renderText({
text2
})
})
}
)
library(shiny)
library(ggmap)
library(leaflet)
ui <- shinyUI(bootstrapPage(
leafletOutput("map")
))
server <- shinyServer(function(input, output, session) {
## One alternative: store circles data?
## I dont actually implement this, but you would do this in the observer as well
dat <- reactiveValues(circs = data.frame(lng=numeric(), lat=numeric()))
## Make your initial map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng = -43.1729, lat = -22.9068, zoom = 11) %>%
addTiles(options = providerTileOptions(noWrap = TRUE))
})
## Observe mouse clicks and add circles
observeEvent(input$map_click, {
## Get the click info like had been doing
click <- input$map_click
clat <- click$lat
clng <- click$lng
address <- revgeocode(c(clng,clat))
## Add the circle to the map proxy
## so you dont need to re-render the whole thing
## I also give the circles a group, "circles", so you can
## then do something like hide all the circles with hideGroup('circles')
leafletProxy('map') %>% # use the proxy to save computation
addCircles(lng=clng, lat=clat, group='circles',
weight=1, radius=100, color='black', fillColor='orange',
popup=address, fillOpacity=0.5, opacity=1)
})
})
shinyApp(ui=ui, server=server)
shinyApp(ui=ui, server=server)
shinyApp(ui=ui, server=server)
server <- shinyServer(function(input, output) {
data <- reactiveValues(clickedMarker=NULL)
# produce the basic leaflet map with single marker
output$map <- renderLeaflet(
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(lat = 54.406486, lng = -2.925284)
)
# observe the marker click info and print to console when it is changed.
observeEvent(input$map_marker_click,{
data$clickedMarker <- input$map_marker_click
print(data$clickedMarker)}
)
observeEvent(input$map_click,{
data$clickedMarker <- NULL
print(data$clickedMarker)})
})
ui <- fluidPage(
leafletOutput("map")
)
shinyApp(ui, server)
server <- shinyServer(function(input, output) {
data <- reactiveValues(clickedMarker=NULL)
# produce the basic leaflet map with single marker
output$map <- renderLeaflet(
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
)
# observe the marker click info and print to console when it is changed.
observeEvent(input$map_Polygons_click,{
data$clickedMarker <- input$map_Polygons_click
print(data$clickedMarker)}
)
observeEvent(input$map_click,{
data$clickedMarker <- NULL
print(data$clickedMarker)})
})
ui <- fluidPage(
leafletOutput("map")
)
shinyApp(ui, server)
?reactiveValues
server <- shinyServer(function(input, output) {
data <- reactiveValues(clickedMarker=NULL)
# produce the basic leaflet map with single marker
output$map <- renderLeaflet(
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
)
# observe the marker click info and print to console when it is changed.
observeEvent(input$map_shape_click,{
data$clickedMarker <- input$map_shape_click
print(data$clickedMarker)}
)
observeEvent(input$map_click,{
data$clickedMarker <- NULL
print(data$clickedMarker)})
})
ui <- fluidPage(
leafletOutput("map")
)
shinyApp(ui, server)
countries_map = readOGR("data/countries.geojson", "OGRGeoJSON", layer = "wb_a3")
countries_map = readOGR("data/countries.geojson", "OGRGeoJSON", layer = "ctry")
?readOGR
countries_map = readOGR("data/countries.geojson", "wb_a3")
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup,
layerID = IDcountry) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup,
layerID = wb_a3) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup,
layerId = wb_a3) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup,
layerId = joined$wb_a3) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
server <- shinyServer(function(input, output) {
data <- reactiveValues(clickedMarker=NULL)
# produce the basic leaflet map with single marker
output$map <- renderLeaflet(
leaflet(data = joined) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(gdp_pc),
smoothFactor = 0.2,
fillOpacity = 1,
weight = 1.2,
color = "grey60",
popup = state_popup,
layerId = joined$wb_a3) %>%
addLegend("bottomright", pal = pal, values = ~gdp_pc,
title = "GDP per capita (2012)",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
)
# observe the marker click info and print to console when it is changed.
observeEvent(input$map_shape_click,{
data$clickedMarker <- input$map_shape_click
print(data$clickedMarker)}
)
observeEvent(input$map_click,{
data$clickedMarker <- NULL
print(data$clickedMarker)})
})
ui <- fluidPage(
leafletOutput("map")
)
shinyApp(ui, server)
runApp()
runApp()
runApp()
library(sp)
library(maps)
library(maptools)
library(rgdal)
library(leaflet)
library(shiny)
library(shinydashboard)
library(lubridate)
library(Cairo)
library(dplyr)
library(ggplot2)
library(readr)
library(scales)
library(wordcloud)
library(stringi)
library(stringr)
library(DT)
library(plotly)
library(tagcloud)
library(RMySQL)
library(DBI)
library(rmarkdown)
library(knitr)
options(shiny.reactlog=TRUE)
# set the working directory
setwd("~/Documents/OneDrive/Documents/BGSE/First_Term/FTP/PISA/dashboard/app/Dashboard/")
# setwd("tools")
# setwd("Dashboard/tools/")
source("tools/functions.R")
countries <- dbcountries()
macro <- dbmacrovariables()
dbmacrovariables(countries = "COL")
# if you are using shiny-server use this
df <- macro %>% filter(idyear == 2012) %>% left_join(countries) %>%
select(one_of("IDcountry", "country", "gdp_pc", "life_exp", "youth_unemp"))
countries_map = readOGR("data/countries.geojson", "OGRGeoJSON")
joined = merge(countries_map, df, by.x = "wb_a3", by.y = "IDcountry", all=FALSE, sort = FALSE)
pal <- colorQuantile("RdYlBu", joined$gdp_pc, n = 5)
state_popup <- paste0("<strong>Country: </strong>",
joined$sovereignt,
"<br><strong>GDP per cápita, 2012: </strong>",
round(joined$gdp_pc, 2))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(macro)
dbmacrovariables(countries = "COL")
dictionaru <- dbdictionary()
dictionary <- dbdictionary()
dictionary
df_basic <- macro %>% filter(idyear == 2012) %>% left_join(countries) %>%
select(one_of("IDcountry", "country", "gdp_pc", "life_exp", "youth_unemp",
"p_urb", "p_rur", "gini"))
runApp()
df_basic <- macro %>% filter(idyear == 2012) %>% left_join(countries) %>%
select(one_of("IDcountry", "country", "gdp_pc", "life_exp", "youth_unemp",
"p_urb", "p_rur", "gini"))
runApp()
df_basic
runApp()
runApp()
runApp()
dbretrieve(variables = "ST05Q01", countries = "COL")
median(dbretrieve(variables = "ST05Q01", countries = "COL"), na.rm = TRUE)
dbretrieve(variables = "ST05Q01", countries = "COL")
bbbb <- dbretrieve(variables = "ST05Q01", countries = "COL")
View(bbbb)
median(bbbb, na.rm = TRUE)
median(as.numeric(bbbb), na.rm = TRUE)
as.numeric(bbbb)
as.vector(bbbb)
as.numeric(as.vector(bbbb))
class(bbbb)
class(bbbb$ST05Q01)
mean(bbbb, na.rm = TRUE)
mean(bbbb$ST05Q01, na.rm = TRUE)
median(bbbb$ST05Q01, na.rm = TRUE)
median(bbbb$ST05Q01, na.rm = TRUE)
bbbb <- dbretrieve(variables = "ST05Q01", countries = "COL", add_country = TRUE)
bbbb
median(bbbb[, 2], na.rm = TRUE)
bbbb <- dbretrieve(variables = "ST05Q01", countries = "COL", add_country = TRUE)
median(bbbb[, 2], na.rm = TRUE)
bbbb <- dbretrieve(variables = "SC01Q01", countries = "COL", add_country = TRUE, database = "schools")
mode(bbbb[, 2], na.rm = TRUE)
?mode
install.packages("modeest")
library(modeest)
modeest <- discrete(bbbb[, 2], na.rm = TRUE)
modeest
bbbb[, 2]
bbbb <- dbretrieve(variables = "ST05Q01", countries = "COL", add_country = TRUE)
bbbb
bbbb <- dbretrieve(variables = "ST11Q01", countries = "COL", add_country = TRUE)
bbbb
modeest <- discrete(bbbb[, 2], na.rm = TRUE)
discrete(bbbb[, 2], na.rm = TRUE)
density(bbbb)
density(bbbb[, 2])
density(bbbb[, 2], na.rm = TRUE)
plot(density(bbbb[, 2], na.rm = TRUE))
bbbb <- dbretrieve(variables = c("ST11Q01", "ST13Q01"), countries = "COL", add_country = TRUE)
bbbb
runApp()
library(RCurl)
library(XML)
library(syuzhet)
library(RYandexTranslate)
library(tm)
library(SnowballC)
library(dplyr)
setwd("~/Documents/OneDrive/Documents/BGSE/First_Term/FTP/PISA/db_builder/")
source("data_news_functions.R")
languages <- read.csv("language.csv")
iso       <- read.csv("iso_countries.csv")
colnames(iso)[2] <- "IDcountry"
iso_lang  <- left_join(languages, iso)
iso_lang
library(RCurl)
library(XML)
library(syuzhet)
library(RYandexTranslate)
library(tm)
library(SnowballC)
library(dplyr)
setwd("~/Documents/OneDrive/Documents/BGSE/First_Term/FTP/PISA/db_builder/")
source("data_news_functions.R")
languages <- read.csv("language.csv")
iso       <- read.csv("iso_countries.csv")
colnames(iso)[2] <- "IDcountry"
iso_lang  <- left_join(languages, iso)
data_news = NULL
plots_sentiment = NULL
for(i in 1:nrow(iso_lang)){
data_news[[i]] <- google_result_freq(country.code = iso_lang[i, "ISO2"],
country = iso_lang[i, "country"])
plots_sentiment[[i]] <- plot_sentiment(data_news[[i]]$sentence_sentiment)
}
names(data_news) <- iso_lang$IDcountry
names(plots_sentiment) <- iso_lang$IDcountry
save(list = c("data_news", "plots_sentiment"), file = "news.RData")
library(RCurl)
library(XML)
library(syuzhet)
library(RYandexTranslate)
library(tm)
library(SnowballC)
library(dplyr)
library(stringr)
setwd("~/Documents/OneDrive/Documents/BGSE/First_Term/FTP/PISA/db_builder/")
source("data_news_functions.R")
languages <- read.csv("language.csv")
iso       <- read.csv("iso_countries.csv")
colnames(iso)[2] <- "IDcountry"
iso_lang  <- left_join(languages, iso)
data_news = NULL
plots_sentiment = NULL
for(i in 1:nrow(iso_lang)){
data_news[[i]] <- google_result_freq(country.code = iso_lang[i, "ISO2"],
country = iso_lang[i, "country"])
plots_sentiment[[i]] <- plot_sentiment(data_news[[i]]$sentence_sentiment)
}
names(data_news) <- iso_lang$IDcountry
names(plots_sentiment) <- iso_lang$IDcountry
save(list = c("data_news", "plots_sentiment"), file = "news.RData")
library(RCurl)
library(XML)
library(syuzhet)
library(RYandexTranslate)
library(tm)
library(SnowballC)
library(dplyr)
library(stringr)
library(ggplot2)
setwd("~/Documents/OneDrive/Documents/BGSE/First_Term/FTP/PISA/db_builder/")
source("data_news_functions.R")
languages <- read.csv("language.csv")
iso       <- read.csv("iso_countries.csv")
colnames(iso)[2] <- "IDcountry"
iso_lang  <- left_join(languages, iso)
data_news = NULL
plots_sentiment = NULL
for(i in 1:nrow(iso_lang)){
data_news[[i]] <- google_result_freq(country.code = iso_lang[i, "ISO2"],
country = iso_lang[i, "country"])
plots_sentiment[[i]] <- plot_sentiment(data_news[[i]]$sentence_sentiment)
}
names(data_news) <- iso_lang$IDcountry
names(plots_sentiment) <- iso_lang$IDcountry
save(list = c("data_news", "plots_sentiment"), file = "news.RData")
